package appcontest.practice.beerforyou5.Library;

/**
 * Created by jiuser on 2015-11-21.
 */

public class RankingTest {
    private static int numOfRecommendation = 34;
    public static int[] rule1 = {
            0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33
    };

    public static int[] rule2 = {
            2,5,11,12,25,28,30,31,32,2,5,10,11,25,27,28,29,31,32,3,11,16,19,21,24,28,30,31,32,2,5,7,10,11,12,13,17,19,26,28,29,30,31,32,2,5,7,8,10,11,12,16,19,22,28,31,3,10,11,13,19,24,25,28,29,30,11,18,19,23,24,28,31,32,33,3,11,24,28,32,33,3,4,5,6,11,15,18,22,24,26,28,32,3,7,12,15,17,26,29,31,3,5,21,25,29,31,32,33,2,5,32,0,3,11,16,19,24,29,3,5,11,12,18,21,25,29,32,3,5,10,11,16,18,26,29,32,2,3,5,8,11,12,16,19,21,22,24,28,2,5,11,12,19,22,24,26,28,32,33,2,3,5,11,12,19,24,28,31,32,5,6,8,11,19,21,30,32,2,3,5,6,11,12,16,18,22,24,29,31,32,3,5,11,28,29,32,33,2,3,5,10,11,12,13,15,18,24,25,28,30,32,2,3,5,7,8,11,15,16,19,24,25,28,29,6,11,18,24,29,32,5,12,16,19,25,26,28,31,32,33,3,5,10,11,19,21,24,28,29,30,32,3,8,11,16,24,32,5,6,7,10,11,16,19,25,28,31,32,2,3,5,6,17,24,25,32,3,5,10,12,19,30,32,2,3,5,6,11,18,19,25,29,31,32,2,3,4,6,11,19,24,30,32,33,6,11,14,16,18,19,28,29,31,3,5,6,7,12,16,24,28,31
    };

    public static double[] lift = {
            1.09258,1.04199,1.08895,1.16739,1.11905,1.07641,1.10088,1.09739,1.09291,1.09228,1.06873,1.12899,1.08675,1.11632,1.16338,1.06936,1.15286,1.06523,1.02353,1.07649,1.1014,1.0873,1.09533,1.16238,1.06347,1.07815,1.10923,1.09384,1.00823,1.07649,1.08568,1.17358,1.16546,1.04926,1.1208,1.12208,1.1481,1.06443,1.10211,1.09685,1.14011,1.09665,1.08159,1.04787,1.13266,1.04869,1.11162,1.17042,1.10543,1.08301,1.0779,1.11039,1.089,1.1323,1.06914,1.17168,1.08568,1.13127,1.09466,1.14484,1.10572,1.0727,1.15257,1.11684,1.1149,1.14391,1.05934,1.12125,1.10398,1.11994,1.07391,1.08665,1.07938,1.07602,1.09054,1.17358,1.06204,1.08278,1.07673,1.03261,1.10606,1.06229,1.17042,1.06637,1.08753,1.03403,1.11208,1.1101,1.13762,1.08384,1.1101,1.09069,1.02344,1.10795,1.09541,1.06939,1.11852,1.13985,1.10228,1.09757,1.07047,1.16546,1.13127,1.14642,1.10089,1.09216,1.05489,1.03518,1.08911,1.1014,1.09466,1.02799,1.16739,1.1208,1.04548,1.07746,1.15744,1.07653,1.07085,1.12208,1.14484,1.04067,1.0829,1.07046,1.12944,1.10104,1.07046,1.01135,1.06778,1.08804,1.09116,1.09593,1.12842,1.12825,1.1237,1.0782,1.21156,1.09828,1.08785,1.07433,1.11208,1.10038,1.06884,1.08758,1.06229,1.13517,1.12999,1.08974,1.04505,1.0873,1.06142,1.0274,1.07746,1.12344,1.16418,1.1397,1.11326,1.04764,1.08846,1.09768,1.09208,1.1481,1.064,1.04856,1.11534,1.11296,1.05514,1.14963,1.11144,1.03992,1.05491,1.12125,1.1101,1.04332,1.11874,1.11688,1.14861,1.07994,1.09533,1.06443,1.10572,1.10398,1.04516,1.15744,1.12344,1.11874,1.14589,1.13578,1.0811,1.14087,1.07289,1.08324,1.04127,1.08947,1.04187,1.09839,1.06114,1.0969,1.16238,1.07572,1.05813,1.14642,1.03849,1.05902,1.12944,1.13517,1.11688,1.06473,1.11036,1.05248,1.0929,1.04204,1.07425,1.08383,1.09657,1.11392,1.13762,1.11224,1.12999,1.16418,1.14589,1.0947,1.10036,1.09955,1.11008,1.11994,1.03345,1.07438,1.08957,1.09185,1.00653,1.0727,1.07653,1.1397,1.13578,1.15177,1.0742,1.11839,1.0645,1.01586,1.13291,1.08129,1.15257,1.10089,1.05831,1.08165,1.11036,1.15177,1.1302,1.07657,1.13203,1.05127,1.10211,1.1101,1.0413,1.11326,1.0742,1.02634,1.05966,1.07784,1.09317,1.11004,1.05084,1.12628,1.089,1.11175,1.09553,1.0565,1.01489,1.07815,1.09685,1.11684,1.08665,1.14963,1.11839,1.1302,1.06802,1.14011,1.1149,1.09216,1.07085,1.0811,1.12039,1.07994,1.10923,1.09665,1.14391,1.08737,1.03788,1.14861,1.06273,1.13203,1.12039,1.16336,1.04529,1.09384,1.08159,1.17168,1.07938,1.03383,1.14087,1.0645,1.16336,1.0967,1.08547,1.07602,1.02799,1.21156,1.08846,1.07994,1.07289,1.06802,1.07994,1.0967,1.06543,1.06473,1.09054,1.10606,1.05533,1.09768,1.13291,1.0781,1.08547
    };

    public static double[] calPredictedScore(int[] positions){
        int i, j;
        int found_flag = 0;
        double[] result_score = new double[34];

        for(i=0; i < positions.length; i++){

            for(j=0; j<rule1.length; j++){

                if( rule1[j] == positions[i] ){
                    System.out.println("i :"+i+ " positions[i] : " + positions[i]);
                    System.out.println("j :"+i+ " rule1[j] : " + rule1[j]);
                    System.out.println("j :"+i+ " rule2[j] : " + rule2[j] );

                    //System.out.println("j :"+j+" result_score :"+result_score[rule2[j]] );
                    result_score[rule2[j]] = result_score[rule2[j]] + lift[rule2[j]];
                    System.out.println("j :"+j+" result_score[rule2[j]] :"+result_score[rule2[j]] );
                    found_flag=1;
                }
                // if we found the rule sequence is over...so we quit for j statement
                if(found_flag==1 && ( rule1[j] != rule1[j+1])){
                    System.out.println("break at " +"j : " +j+" rule1[j] : "+ rule1[j]);
                    break;
                }
                found_flag=0;
            }
        }
        return result_score;
    }

    public static int[] findRankingSequence(double[] result_score){
        int[] ranking_sequence = new int[numOfRecommendation];
        double[] result_score_sorted = new double[numOfRecommendation];
        double temp1;
        int i, j;
        for(i=0; i < result_score_sorted.length; i++){
            result_score_sorted[i] = result_score[i];
            System.out.println(result_score_sorted[i] +" ::: "+result_score[i]);
        }

        ///// sort result_score by using quick sort
        /////
        long startTime = System.currentTimeMillis();
        Quicksort sorter = new Quicksort();
        sorter.sort(result_score_sorted);
        long stopTime = System.currentTimeMillis();
        long elapsedTime = stopTime - startTime;
        System.out.println("Quicksort " + elapsedTime);

        if (!sorter.validate(result_score_sorted)) {
            System.out.println(" Quicksort : FAIL ");
        }
        System.out.println("  Quicksort : SUCCESS  ");
        for(i=0; i < result_score_sorted.length; i++){
            System.out.println(result_score_sorted[i] +" ::: "+result_score[i]);
        }

        ///// pick temp1 from beginning of sorted array (highest value)
        ///// find matched position which is the highest value's position
        /////
        for(i=0 ; i<result_score_sorted.length ;i++){
            temp1 = result_score_sorted[result_score_sorted.length-1-i];
            for(j=0; j< result_score.length; j++ ){
                if( temp1 == result_score[j] ){
                    ranking_sequence[i] = j;
                }
            }
        }
        return ranking_sequence;
    }
    /*
    public static void main(String [] arg) throws IOException {

        double[] result_score = new double[numOfRecommendation];
        int[] result_ranking_sequence = new int[numOfRecommendation];
        int[] test_positions = {0,2,3};
        result_score = calPredictedScore(test_positions);
        for(int i=0; i<result_score.length; i++){
            System.out.println("i : "+i+" result_score : "+result_score[i]);
        }

        result_ranking_sequence = findRankingSequence(result_score);
        for(int i=0; i<result_ranking_sequence.length; i++){
            System.out.println("i : "+i+" result_ranking_sequence : "+result_ranking_sequence[i]);
        }
    }
    */
}